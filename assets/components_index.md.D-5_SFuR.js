import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Q0oZKCXt.js";const d=JSON.parse('{"title":"Components Overview","description":"","frontmatter":{},"headers":[],"relativePath":"components/index.md","filePath":"components/index.md"}'),e={name:"components/index.md"};function l(o,s,p,r,h,k){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="components-overview" tabindex="-1">Components Overview <a class="header-anchor" href="#components-overview" aria-label="Permalink to &quot;Components Overview&quot;">​</a></h1><p>PennyFincher is built with a modular component structure. This section provides documentation for the key components used throughout the application.</p><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><ul><li><a href="./Layout.html">Layout</a> - The main layout component that provides the application structure</li><li><a href="./TransactionFormModal.html">TransactionFormModal</a> - Modal for adding new transactions</li><li><a href="./RecurringTransactions.html">RecurringTransactions</a> - Component for managing recurring transactions</li><li><a href="./RecurringTransactionFormModal.html">RecurringTransactionFormModal</a> - Modal for adding recurring transactions</li><li><a href="./Notification.html">Notification</a> - Toast notification system for success/error messages</li><li><a href="./CategoryManager.html">CategoryManager</a> - Component for managing transaction categories</li><li><a href="./SkeletonLoader.html">SkeletonLoader</a> - Loading state components for different UI elements</li></ul><h2 id="page-components" tabindex="-1">Page Components <a class="header-anchor" href="#page-components" aria-label="Permalink to &quot;Page Components&quot;">​</a></h2><ul><li><strong>Dashboard</strong> - Main dashboard with financial overview and charts</li><li><strong>Transactions</strong> - Page for listing and filtering transactions</li><li><strong>Budget</strong> - Budget management page with comparison charts</li><li><strong>Reports</strong> - Financial reports with charts and analyses</li><li><strong>Settings</strong> - Application settings and configuration</li></ul><h2 id="component-structure" tabindex="-1">Component Structure <a class="header-anchor" href="#component-structure" aria-label="Permalink to &quot;Component Structure&quot;">​</a></h2><p>Components in PennyFincher follow a consistent pattern:</p><ul><li>Clear separation of props using TypeScript interfaces</li><li>State management using React hooks</li><li>JSDoc comments for documentation</li><li>Consistent styling with Tailwind CSS</li></ul><h2 id="component-examples" tabindex="-1">Component Examples <a class="header-anchor" href="#component-examples" aria-label="Permalink to &quot;Component Examples&quot;">​</a></h2><h3 id="basic-component-structure" tabindex="-1">Basic Component Structure <a class="header-anchor" href="#basic-component-structure" aria-label="Permalink to &quot;Basic Component Structure&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Description of what the component does</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Props}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - Component props</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {JSX.Element}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> The rendered component</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // State and hooks</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialState);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Event handlers and other functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JSX rendering</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Component content */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>See individual component pages for detailed documentation and usage examples.</p>`,13)]))}const g=i(e,[["render",l]]);export{d as __pageData,g as default};
